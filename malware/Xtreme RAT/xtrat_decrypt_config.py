# Copyright (c) 2015 FireEye, Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

import sys
from Crypto.Cipher import ARC4
import argparse

if __name__ == "__main__":
	
	parser=argparse.ArgumentParser(description="decrypts and prints an Xtreme RAT config file")
	parser.add_argument('i', metavar='Input', help='a path to an Xtreme RAT config file')
	parser.add_argument('-k', action='store_true', help='try the key CONFIG instead of CYBERGATEPASS')
	
	args = parser.parse_args()
	
	key = "C\x00Y\x00B\x00E\x00R\x00G\x00A\x00T\x00E\x00P\x00A\x00S\x00S\x00"
	if args.k:
		key = "C\x00O\x00N\x00F\x00I\x00G\x00"
		
	#buggy implementation of string length
	keylen = len(key)
	if key[1] == "\x00" and key[3] == "\x00" and keylen % 2 == 0:
		keylen = keylen / 2
		key = key[0:keylen]
	
	f = args.i
	with open(f, 'rb') as fd:
		ciphertxt = fd.read()

	rc = ARC4.new(key)
	print(rc.decrypt(ciphertxt))
