# Copyright (c) 2015 FireEye, Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

import sys
import os
import struct
import argparse

def two_byte_xor(buf, key, preserve_unicode=True):
    out = ''
    for i in range(0, len(buf) / 2):
        c = struct.unpack(">H", buf[(i * 2):(i * 2) + 2])[0]
        if c in (0x0a00, 0x0d00):
            continue
        c ^= key
        out += struct.pack(">H", c)

    if preserve_unicode:
        return out
    return out.replace("\x00", "")

if __name__ == "__main__":
    parser=argparse.ArgumentParser(description="decrypts and prints an Xtreme RAT keylog file")
    parser.add_argument('i', metavar='Input', help='a path to an Xtreme RAT keylog file')
    parser.add_argument('-u', action='store_true', help='Unicode output')
        
    args = parser.parse_args()
    preserve_unicode = args.u
    keylog = args.i
    if not os.path.isfile(keylog):
        print("argument supplied is not a file!")
    with open(keylog, 'rb') as fd:
        buf = fd.read()

    dec = two_byte_xor(buf, 0x3fa5, preserve_unicode)
    if "---" in dec.replace("\x00", "") or "---" in dec or "<br />" in dec.replace("\x00","") or "<br />" in dec:
        print(dec)
    else:
        dec = two_byte_xor(buf, 0x5500, preserve_unicode)
        if "---" in dec.replace("\x00","") or "---" in dec or "<br />" in dec.replace("\x00","") or "<br />" in dec:
            print(dec)
        else:
            dec = two_byte_xor(buf, 0x1300, preserve_unicode)
            if "---" in dec.replace("\x00","") or "---" in dec or "<br />" in dec.replace("\x00","") or "<br />" in dec:
                print(dec)
            else:
                print("could not decrypt keylog..")
    